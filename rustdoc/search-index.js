var searchIndex = JSON.parse('{\
"cairo":{"doc":"This module contains the code that executes a compiled …","t":[0,0,0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,8,10,10,10,10,10,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,10,11,11,11,11,11,11,11,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,11,11,11,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,11,11,11,11,11,11],"n":["flags","helper","memory","runner","word","AP_ADD","AP_ONE","AP_Z2","DST_AP","NUM_FLAGS","OP0_AP","OP1_AP","OP1_DBL","OP1_FP","OP1_VAL","OPC_AEQ","OPC_CALL","OPC_JMP_INC","OPC_RET","PC_ABS","PC_JNZ","PC_REL","PC_SIZ","POS_DST","POS_FLAGS","POS_OP0","POS_OP1","RES_ADD","RES_MUL","RES_ONE","CairoFieldHelpers","chunk_u16","least_significant_byte","to_hex_le","to_u64","vec_to_field","CairoMemory","borrow","borrow_mut","data","deref","deref_mut","drop","fmt","from","get_codelen","index","index_mut","init","into","new","read","size","to_string","try_from","try_into","type_id","vzip","write","CairoContext","CairoProgram","CairoState","CairoStep","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","execute","from","from","from","from","get_final","get_steps","init","init","init","init","instr","into","into","into","into","mem","new","new","new","next_pc","set_dst","set_op0","set_op1","set_res","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","CairoWord","Decomposition","ap_up","ap_up","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","dst_reg","dst_reg","f15","f15","f_ap_add","f_ap_add","f_ap_one","f_ap_one","f_dst_fp","f_dst_fp","f_op0_fp","f_op0_fp","f_op1_ap","f_op1_ap","f_op1_fp","f_op1_fp","f_op1_val","f_op1_val","f_opc_aeq","f_opc_aeq","f_opc_call","f_opc_call","f_opc_ret","f_opc_ret","f_pc_abs","f_pc_abs","f_pc_jnz","f_pc_jnz","f_pc_rel","f_pc_rel","f_res_add","f_res_add","f_res_mul","f_res_mul","flag_at","flag_at","flags","flags","from","init","into","new","off_dst","off_dst","off_op0","off_op0","off_op1","off_op1","op0_reg","op0_reg","op1_src","op1_src","opcode","opcode","pc_up","pc_up","res_log","res_log","to_owned","try_from","try_into","type_id","vzip","word"],"q":["cairo","","","","","cairo::flags","","","","","","","","","","","","","","","","","","","","","","","","","cairo::helper","","","","","","cairo::memory","","","","","","","","","","","","","","","","","","","","","","","cairo::runner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cairo::word","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Definition of some constants for easier readability of the …","This module inlcudes some field helpers that are useful …","This module represents the Cairo memory, containing the …","This module represents a run of a Cairo program as a …","The Cairo language works natively for field elements in …","Update ap by adding a number of positions","Update ap by self increment","Update by 2 in call instructions or zero behaviour for …","Destination refers to ap register","Number of Cairo flags","First operand refers to ap register","Second operand refers to ap register","Second operand is double indexing","Second operand refers to fp register","Second operand is immediate value","Operation code is an assert-equal","Operation code is a call","Operation code is a jump or an increment","Operation code is a return","Update pc by an absolute jump","Update pc by a conditional relative jump","Update pc by a relative jump","Default increase of pc by adding instruction size","Position of destination offset of 16 bits within …","Bit position of the beginning of the flags in a Cairo …","Position of first operand offset of 16 bits within …","Position of second operand offset of 16 bits within …","Result is an addition","Result is a multiplication","Result is a single operand","Field element helpers for Cairo","Return pos-th 16-bit chunk as another field element","Return field element as byte, if it fits. Otherwise …","Return a field element in hexadecimal in little endian","Return first 64 bits of the field element","Return a vector of field elements from a vector of i128","This data structure stores the memory of the program","","","full memory vector, None if non initialized","","","","","Returns the argument unchanged.","Get size of the public memory","","","","Calls <code>U::from(self)</code>.","Create a new memory structure from a vector of field …","Read element in memory address","Get size of the full memory including dummy 0th entry","","","","","","Write u64 element in memory address","A structure to store auxiliary variables throughout …","This struct stores the needed information to run a program","A structure to store program counter, allocation pointer …","A data structure to store a current step of Cairo …","","","","","","","","","","","This function creates an instance of a default CairoContext…","","","","","","","","","","","","","Executes a Cairo step from the current registers","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Outputs the final value of the pointers after the …","Outputs the total number of steps of the execution carried …","","","","","This function returns the current word instruction being …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","current word of the program","Creates a new Cairo execution step from a step index, a …","Creates a Cairo execution from the public information …","Creates a new triple of pointers","This function computes the next program counter Panics if …","This function computes the destination address","This function computes the first operand address","This function computes the second operand address and …","This function computes the value of the result of the …","","","","","","","","","","","","","","","","","","A Cairo word for the runner. Some words are instructions …","This trait contains methods that decompose a field element …","Returns flagset for allocation pointer update","","","","","","","","","Returns flagset for destination register","","Returns bit-flag for 16th position","","Returns bit-flag for allocation counter update being a …","","Returns bit-flag for allocation counter update being a …","","Returns bit-flag for destination register as <code>F</code>","","Returns bit-flag for first operand register as <code>F</code>","","Returns bit-flag for allocation pointer for second …","","Returns bit-flag for frame pointer for second register as <code>F</code>","","Returns bit-flag for immediate value for second register …","","Returns bit-flag for operation being an assert-equal as <code>F</code>","","Returns bit-flag for operation being a call as <code>F</code>","","Returns bit-flag for operation being a return as <code>F</code>","","Returns bit-flag for program counter update being absolute …","","Returns bit-flag for program counter update being …","","Returns bit-flag for program counter update being relative …","","Returns bit-flag for addition operation in right side as <code>F</code>","","Returns bit-flag for multiplication operation in right …","","Returns i-th bit-flag","","Returns vector of 16 flags","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a CairoWord from a field element","Returns the destination offset in biased representation","","Returns the first operand offset in biased representation","","Returns the second operand offset in biased representation","","Returns flagset for first operand register","","Returns flagset for second operand register","","Returns flagset for operation code","","Returns flagset for program counter update","","Returns flagset for result logics","","","","","","","Returns the content of the word as a field element"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,3,4,5,6,3,4,5,6,6,6,3,3,4,5,6,3,4,5,6,3,4,5,6,4,3,4,5,6,5,5,3,4,5,6,4,3,4,5,6,4,4,5,6,4,4,4,4,4,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,0,0,7,8,8,8,8,8,8,8,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,8,8,8,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,8,8,8,8,8,8],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",0]]],[[],["u8",0]],[[],["string",3]],[[],["u64",0]],[[],["vec",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[],["usize",0]],[[]],[[["vec",3]],["cairomemory",3]],[[["",0]],["option",4]],[[["",0]],["u64",0]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["",0]]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["cairostate",3]],[[["",0],["",0]]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[]],[[]],[[]],[[]],[[["",0]],["cairostate",3]],[[["",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[["",0]],["cairoword",3]],[[]],[[]],[[]],[[]],null,[[["cairomemory",3],["cairostate",3]],["cairostep",3]],[[["cairomemory",3],["u64",0],["u64",0]],["cairoprogram",3]],[[]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],null,null,[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["cairoword",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0]],["vec",3]],[[["",0]],["vec",3]],[[]],[[],["usize",0]],[[]],[[],["cairoword",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["",0]]]],"p":[[8,"CairoFieldHelpers"],[3,"CairoMemory"],[3,"CairoContext"],[3,"CairoStep"],[3,"CairoProgram"],[3,"CairoState"],[8,"Decomposition"],[3,"CairoWord"]]},\
"commitment_dlog":{"doc":"","t":[0,0,0,0,3,8,3,16,16,3,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,5,11,11,11,11,11,10,12,5,5,12,11,11,5,12,12,5,5,10,5,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,3,3,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["chunked","commitment","evaluation_proof","srs","BatchEvaluationProof","CommitmentCurve","Evaluation","Map","Params","PolyComm","b_poly","b_poly_coefficients","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chunk_blinding","chunk_commitment","clone","clone_into","combine","combine_one","combine_one_endo","combined_inner_product","commitment","degree_bound","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","evaluation_points","evaluations","evaluations","fmt","from","from","from","init","init","init","inner_prod","into","into","into","map","multi_scalar_mul","of_coordinates","opening","pows","product","r","scale","serialize","shift_scalar","shifted","sponge","squeeze_challenge","squeeze_prechallenge","to_coordinates","to_group","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unshifted","vzip","vzip","vzip","xi","Challenges","OpeningProof","borrow","borrow","borrow_mut","borrow_mut","chal","chal_inv","challenges","clone","clone_into","delta","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","init","init","into","into","lr","prechallenges","sg","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","z1","z2","SRS","add_lagrange_basis","borrow","borrow_mut","clone","clone_into","commit","commit_evaluations","commit_evaluations_non_hiding","commit_helper","commit_non_hiding","create","default","deref","deref_mut","deserialize","drop","endo_q","endo_r","endos","fmt","from","g","h","init","into","lagrange_bases","mask","max_degree","open","serialize","to_owned","try_from","try_into","type_id","verify","vzip"],"q":["commitment_dlog","","","","commitment_dlog::commitment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","commitment_dlog::evaluation_proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","commitment_dlog::srs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","This module implements Dlog-based polynomial commitment …","","This module implements the Marlin structured reference …","Contains the batch evaluation","","Contains the evaluation of a polynomial commitment at a …","","","A polynomial commitment.","Returns (1 + chal[-1] x)(1 + chal[-2] x^2)(1 + chal[-3] …","","","","","","","","Multiplies each blinding chunk of f with powers of zeta^n …","Multiplies each commitment chunk of f with powers of zeta^n","","","","Combine where x1 = one","Combine where x1 = one","Computes the linearization of the evaluations of a …","The commitment of the polynomial being evaluated","optional degree bound","","","","","","","","","","","vector of evaluation points","Contains an evaluation table","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","batched opening proof","<code>pows(d, x)</code> returns a vector containing the first <code>d</code> powers …","Returns the product of all the field elements belonging to …","scaling factor for polynomials","","","Inside the circuit, we have a specialized scalar …","","","","","","","","","","","","","","","","","","","","","scaling factor for evaluation point powers","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","vector of rounds of L &amp; R commitments","","","","","","","","","","","","","","","Compute commitments to the lagrange basis corresponding to …","","","","","Commits a polynomial, potentially splitting the result in …","","","","This function commits a polynomial using the SRS’ basis …","This function creates SRS instance for circuits with …","","","","","","Coefficient for the curve endomorphism","Coefficient for the curve endomorphism","","","Returns the argument unchanged.","The vector of group elements for committing to polynomials …","A group element used for blinding commitments","","Calls <code>U::from(self)</code>.","Commitments to Lagrange bases, per domain size","Turns a non-hiding polynomial commitment into a hidding …","","This function opens polynomial commitments in batch plnms: …","","","","","","This function verifies batch of batched polynomial …",""],"i":[0,0,0,0,0,0,0,1,1,0,0,0,2,3,4,2,3,4,4,4,4,4,1,1,1,0,2,2,2,3,4,2,3,4,4,2,3,4,3,2,3,4,2,3,4,2,3,4,0,2,3,4,4,4,1,3,0,0,3,4,4,0,4,3,0,0,1,0,4,2,3,4,2,3,4,2,3,4,4,2,3,4,3,0,0,5,6,5,6,5,5,6,6,6,6,5,6,5,6,5,6,6,5,6,5,6,5,6,6,6,6,6,5,6,5,6,5,6,5,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],"f":[null,null,null,null,null,null,null,null,null,null,[[["field",8]],["field",8]],[[],["vec",3,[["field",8]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]],["polycomm",3]],[[["",0],["",0]]],[[],["vec",3]],[[],["vec",3]],[[["scalarchallenge",3]],["vec",3]],[[["scalarfield",6],["scalarfield",6],["usize",0]],["scalarfield",6,[["commitmentcurve",8]]]],null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,null,null,[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["field",8]],[[]],[[]],[[]],[[["",0]],["polycomm",3]],[[]],[[]],null,[[["usize",0],["field",8]],["vec",3,[["field",8]]]],[[],["field",8]],null,[[["",0]],["polycomm",3]],[[["",0]],["result",4]],[[]],null,null,[[["",0],["",0]],["",26,[["primefield",8],["squarerootfield",8]]]],[[["",0]],["scalarchallenge",3,[["squarerootfield",8]]]],[[["",0]],["option",4]],[[],["commitmentcurve",8]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["",0],["scalarfield",6],["",0]],["challenges",3,[["scalarfield",6]]]],[[["",0]],["openingproof",3]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],null,[[["",0],["",0]],["vec",3,[["scalarchallenge",3,[["scalarfield",6]]]]]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,[[["",0],["d",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["srs",3]],[[["",0],["",0]]],[[["",0],["densepolynomial",3],["option",4,[["usize",0]]]]],[[["",0],["d",3,[["scalarfield",6]]],["evaluations",3],["option",4,[["usize",0]]]]],[[["",0],["d",3,[["scalarfield",6]]],["evaluations",3],["option",4,[["usize",0]]]],["polycomm",3]],[[["option",4,[["usize",0]]],["bool",0],["option",4,[["usize",0]]]],["polycomm",3]],[[["",0],["densepolynomial",3],["option",4,[["usize",0]]]],["polycomm",3]],[[["usize",0]]],[[],["srs",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],null,null,[[]],[[["",0],["formatter",3]],["result",6]],[[]],null,null,[[],["usize",0]],[[]],null,[[["",0],["polycomm",3]]],[[["",0]],["usize",0]],[[["",0],["scalarfield",6],["scalarfield",6],["",0]],["openingproof",3]],[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["vec",3],["",0]],["bool",0]],[[]]],"p":[[8,"CommitmentCurve"],[3,"Evaluation"],[3,"BatchEvaluationProof"],[3,"PolyComm"],[3,"Challenges"],[3,"OpeningProof"],[3,"SRS"]]},\
"export_test_vectors":{"doc":"","t":[0,5,0,13,13,13,13,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,11,11,12,12,5,5,11,11,12,11,11,11,11,11,11,11,11],"n":["inner","main","vectors","B10","Hex","Kimchi","Legacy","Mode","ParamType","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from_str","from_str","init","init","into","into","main","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","TestVector","TestVectors","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","generate","init","init","input","into","into","name","output","poseidon","rand_fields","serialize","serialize","test_vectors","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["export_test_vectors","","","export_test_vectors::inner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","export_test_vectors::vectors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","“Usage: cargo run –all-features –bin …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","creates a set of test vectors","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Computes the poseidon hash of several field elements. Uses …","generates a vector of <code>length</code> field elements","","","","","","","","","","",""],"i":[0,0,0,1,1,2,2,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,1,2,1,2,1,2,1,2,0,0,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,3,4,4,3,4,3,4,0,0,3,4,3,3,4,3,4,3,4,3,4],"f":[null,[[]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["mode",4],["paramtype",4]],["testvectors",3]],[[],["usize",0]],[[],["usize",0]],null,[[]],[[]],null,null,[[["arithmeticspongeparams",3,[["fp",6]]]],["fp",6]],[[["u8",0]],["vec",3,[["fp",6]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]]],"p":[[4,"Mode"],[4,"ParamType"],[3,"TestVectors"],[3,"TestVector"]]},\
"flamegraph":{"doc":"","t":[5,5],"n":["black_box","main"],"q":["flamegraph",""],"d":["function to avoid optimizations by the compiler taken from …",""],"i":[0,0],"f":[[[]],[[]]],"p":[]},\
"groupmap":{"doc":"Follows approach of SvdW06 to construct a “near injection…","t":[3,8,10,11,11,11,11,11,11,11,5,11,11,10,11,10,11,11,11,11,11],"n":["BWParameters","GroupMap","batch_to_group_x","batch_to_group_x","borrow","borrow_mut","deref","deref_mut","drop","from","get_y","init","into","setup","setup","to_group","to_group","try_from","try_into","type_id","vzip"],"q":["groupmap","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Returns the argument unchanged.","returns the y-coordinate if x is a valid point on the …","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,1,2,2,2,2,2,2,2,0,2,2,1,2,1,2,2,2,2,2],"f":[null,null,[[["",0],["vec",3]],["vec",3]],[[["",0],["vec",3]],["vec",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["option",4]],[[],["usize",0]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[8,"GroupMap"],[3,"BWParameters"]]},\
"kimchi":{"doc":"CI dependency status","t":[0,0,0,0,0,0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,18,8,4,18,13,13,13,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,13,13,4,13,3,3,17,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,5,5,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,12,12,12,11,11,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,12,12,5,5,12,12,12,12,12,12,12,3,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,3,13,3,13,13,13,4,13,4,3,13,13,6,13,13,3,4,13,13,13,13,13,3,13,13,13,13,3,13,13,13,13,13,13,13,13,4,4,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,11,11,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,12,12,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,12,5,5,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,12,13,13,13,13,3,3,13,13,4,13,13,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,0,0,0,17,3,17,5,11,11,11,11,5,11,11,11,11,12,11,11,11,11,12,12,12,11,5,11,11,11,11,5,11,5,13,3,6,3,3,4,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,3,8,16,4,3,3,6,16,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,0,0,0,0,0,0,0,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,5,11,11,11,11,11,11,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,11,11,11,11,11,11,11,11,13,17,13,17,17,4,13,13,11,11,11,11,11,11,11,11,0,11,11,11,11,12,12,12,12,12,12,5,5,17,17,3,17,17,17,17,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,5,3,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,12,12,12,12,11,12,12,17,6,17,17,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,13,13,13,13,4,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,5,5,8,10,10,10,10,3,3,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,6,3,11,11,11,12,11,11,11,11,11,12,11,11,11,12,12,12,12,11,12,0,11,11,11,11,11,5,3,6,12,5,11,11,12,11,11,12,11,12,11,12,11,11,12,12,12,12,11,11,11,5,11,12,3,3,11,11,11,11,12,12,12,11,11,11,11,11,11,12,11,11,12,12,12,12,12,11,11,11,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12,12],"n":["alphas","bench","circuits","error","linearization","plonk_sponge","proof","prover","prover_index","verifier","verifier_index","Alphas","MustConsumeIterator","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","drop","fmt","fmt","fmt","from","from","get_alphas","get_exponents","init","init","instantiate","into","into","into_iter","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","next","register","serialize","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BenchmarkCtx","CIRCUIT_SIZE","batch_verification","borrow","borrow_mut","create_proof","deref","deref_mut","drop","from","init","into","new","try_from","try_into","type_id","vzip","argument","constraints","domains","expr","gate","lookup","macros","polynomial","polynomials","scalars","wires","ARGUMENT_TYPE","Argument","ArgumentType","CONSTRAINTS","Gate","Lookup","Permutation","borrow","borrow_mut","clone","clone_into","combined_constraints","constraints","deref","deref_mut","deserialize","drop","eq","fmt","from","get_hash","hash","init","into","ne","serialize","to_owned","try_from","try_into","type_id","vzip","0","ConstraintSystem","Custom","DisconnectedWires","GateError","IncorrectPublic","LookupConstraintSystem","Shifts","ZK_ROWS","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chacha8","clone","clone","clone_into","clone_into","coefficients8","complete_addl4","configuration","create","create","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","domain","drop","drop","drop","drop","emull","endo","endomul_scalar8","eval_vanishes_on_last_4_rows","eval_zk_polynomial","evaluate","fmt","fmt","fmt","fr_sponge_params","from","from","from","from","gates","generic4","genericm","gnrc_lnrz","gnrc_quot","gnrc_scalars","init","init","init","init","into","into","into","into","l04","l08","l1","lookup_constraint_system","lookup_selectors","lookup_table","lookup_table8","mull8","new","perm_aggreg","perm_lnrz","perm_quot","perm_scalars","ps8","psm","public","serialize","serialize","shift","shifts","sid","sigmal1","sigmal8","sigmam","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vanishes_on_last_4_rows","vanishes_on_last_4_rows","verify","verify_generic","vzip","vzip","vzip","vzip","zero4","zero8","zk_polynomial","zk_w3","zkpl","zkpm","0","0","1","err","row","EvaluationDomains","borrow","borrow_mut","clone","clone_into","create","d1","d2","d4","d8","deref","deref_mut","deserialize","drop","fmt","from","init","into","serialize","to_owned","try_from","try_into","type_id","vzip","Add","Add","Add","Alpha","Alpha","Beta","Beta","BinOp","Cache","Cache","CacheId","Cell","Cell","Coefficient","Column","Constant","ConstantExpr","Constants","Double","Dup","E","EndoCoefficient","EndoCoefficient","Environment","Expr","Gamma","Gamma","Index","JointCombiner","JointCombiner","Linearization","Literal","Literal","Load","LookupAggreg","LookupEnvironment","LookupKindIndex","LookupSorted","LookupTable","Mds","Mds","Mul","Mul","Mul","Op2","PolishToken","Pow","Pow","Pow","Square","Store","Sub","Sub","Sub","UnnormalizedLagrangeBasis","UnnormalizedLagrangeBasis","VanishesOnLast4Rows","VanishesOnLast4Rows","Variable","Witness","Z","add","add","add_assign","aggreg","alpha","beta","beta","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cell","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","coeff","coefficient","col","combine_constraints","constant","constant_term","constants","constraints","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","domain","double","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","endo_coefficient","eq","eq","eq","eq","eq","eq","eq","evaluate","evaluate","evaluate","evaluate_","evaluate_constants","evaluate_constants","evaluations","evaluations","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gamma","get_hash","get_hash","get_hash","hash","hash","hash","index","index","index_terms","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","is_one","is_one","is_zero","is_zero","joint_combiner","l0_1","l0_1","latex_str","linearize","literal","lookup","map","mds","mul","mul","mul","ne","ne","ne","ne","ne","ne","neg","neg","ocaml_str","one","one","partial_cmp","partial_cmp","partial_cmp","pow","pow","pows","prologue","row","selectors","serialize","serialize","serialize","serialize","sorted","square","sub","sub","table","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_polish","to_polynomial","to_polynomial","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vanishes_on_last_4_rows","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","witness","witness_curr","witness_next","z","zero","zero","0","0","0","0","0","0","0","0","0","0","1","1","1","1","col","row","0","0","0","0","0","0","0","0","1","1","1","2","0","0","0","0","0","col","row","boolean","0","ChaCha0","ChaCha1","ChaCha2","ChaChaFinal","Circuit","CircuitGate","CompleteAdd","Curr","CurrOrNext","EndoMul","EndoMulScalar","GateType","Generic","Next","Poseidon","VarBaseMul","Zero","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","coeffs","create_endomul","create_generic","create_generic_gadget","create_poseidon","create_poseidon_gadget","create_vbmul","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","endomul","eq","eq","fmt","fmt","fmt","from","from","from","from","from_i64","from_u64","get_hash","get_hash","hash","hash","init","init","init","init","into","into","into","into","lookup_kinds","lookup_kinds_map","partial_cmp","partial_cmp","ps","rc","serialize","serialize","serialize","serialize","shift","to_i64","to_owned","to_owned","to_owned","to_u64","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","vbmul","verify","verify_complete_add","verify_endomul","verify_endomul_scalar","verify_generic","verify_poseidon","verify_vbmul","vzip","vzip","vzip","vzip","wires","write","zero","constraints","lookups","tables","CONSTRAINTS","LookupConfiguration","ZK_ROWS","aggregation","borrow","borrow_mut","clone","clone_into","constraints","deref","deref_mut","deserialize","drop","dummy_lookup_entry","fmt","from","init","into","lookup_used","max_joint_size","max_lookups_per_row","serialize","sorted","to_owned","try_from","try_into","type_id","verify","vzip","zk_patch","Joint","JointLookup","JointLookupSpec","LocalPosition","LookupInfo","LookupsUsed","Single","SingleLookup","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_row","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","column","create","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","entry","evaluate","evaluate","evaluate","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","kinds","kinds_map","kinds_tables","lookup_used","max_joint_size","max_per_row","reduce","row","selector_polynomials_and_tables","serialize","serialize","serialize","serialize","serialize","table_id","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","vzip","0","0","CombinedEntry","Entry","Field","GateLookupTable","GatesLookupMaps","GatesLookupSpec","LookupTable","Params","UncombinedEntry","Xor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","combine_table_entry","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","evaluate","evaluate","evaluate","fmt","fmt","fmt","from","from","from","from","from","gate_lookup_table","gate_positions","gate_selector_map","gate_table_map","get_hash","get_hash","get_hash","get_table","hash","hash","hash","init","init","init","init","init","into","into","into","into","into","ne","ne","partial_cmp","partial_cmp","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","LookupEvals","LookupPolys","LookupShifts","WitnessEvals","WitnessOverDomains","WitnessShifts","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","d4","d8","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","h1","h1","h2","h2","init","init","init","init","init","init","into","into","into","into","into","into","l","l","lw","lw","next","next","this","this","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","w","z","chacha","complete_add","endomul_scalar","endosclmul","generic","permutation","poseidon","varbasemul","ChaCha0","ChaCha1","ChaCha2","ChaChaFinal","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","constraints","constraints","constraints","constraints","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","testing","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","xor_table","chacha20","chacha20_gates","chacha20_rows","CompleteAdd","borrow","borrow_mut","constraints","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","EndomulScalar","borrow","borrow_mut","constraints","deref","deref_mut","drop","from","gen_witness","init","into","try_from","try_into","type_id","vzip","EndoMulResult","EndosclMul","acc","borrow","borrow","borrow_mut","borrow_mut","constraints","deref","deref","deref_mut","deref_mut","drop","drop","from","from","gen_witness","init","init","into","into","n","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Add","CONSTRAINTS","Const","GENERIC_COEFFS","GENERIC_REGISTERS","GenericGateSpec","Mul","Pub","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","testing","try_from","try_into","type_id","vzip","0","left_coeff","mul_coeff","output_coeff","output_coeff","right_coeff","create_circuit","fill_in_witness","CONSTRAINTS","POS_ROWS_PER_HASH","Poseidon","ROUNDS_PER_HASH","ROUNDS_PER_ROW","SPONGE_WIDTH","STATE_ORDER","borrow","borrow_mut","constraints","deref","deref_mut","drop","from","generate_witness","init","into","round_to_cols","try_from","try_into","type_id","vzip","VarbaseMul","VarbaseMulResult","acc","borrow","borrow","borrow_mut","borrow_mut","constraints","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","n","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","witness","RandomOracles","alpha","alpha_chal","beta","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","fmt","from","gamma","init","into","joint_combiner","to_owned","try_from","try_into","type_id","u","u_chal","v","v_chal","vzip","zeta","zeta_chal","COLUMNS","GateWires","PERMUTS","WIRES","Wire","borrow","borrow_mut","clone","clone_into","col","deref","deref_mut","deserialize","drop","eq","fmt","from","init","into","ne","new","read","row","serialize","to_owned","try_from","try_into","type_id","vzip","write","IncorrectCommitmentLength","NoRoomForZkInWitness","OpenProof","Permutation","ProofError","Prover","ValueNotInTable","VerifyError","WitnessCsInconsistent","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","init","init","into","into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","constraints_expr","expr_linearization","linearization_columns","FrSponge","absorb","absorb_evaluations","challenge","new","LookupCommitments","LookupEvaluations","ProofEvaluations","ProverCommitments","ProverProof","aggreg","aggreg","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","combine","commitments","create","create_recursive","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","dummy_with_witness_evaluations","evals","from","from","from","from","from","ft_eval1","generic_selector","init","init","init","init","init","into","into","into","into","into","lookup","lookup","oracles","poseidon_selector","prev_chal_evals","prev_challenges","proof","public","s","sorted","sorted","t_comm","table","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","w","w_comm","z","z_comm","Result","ProverIndex","borrow","borrow_mut","create","cs","deref","deref_mut","deserialize","drop","fmt","fq_sponge_params","from","init","into","linearization","max_poly_size","max_quot_size","powers_of_alpha","serialize","srs","testing","try_from","try_into","type_id","verifier_index","vzip","new_index_for_test","OraclesResult","Result","all_alphas","batch_verify","borrow","borrow_mut","combined_inner_product","deref","deref_mut","digest","drop","fq_sponge","from","ft_eval0","init","into","oracles","p_eval","polys","powers_of_eval_points_for_chunks","try_from","try_into","type_id","verify","vzip","zeta1","LookupVerifierIndex","VerifierIndex","borrow","borrow","borrow_mut","borrow_mut","chacha_comm","coefficients_comm","complete_add_comm","deref","deref","deref_mut","deref_mut","deserialize","deserialize","domain","drop","drop","emul_comm","endo","endomul_scalar_comm","fq_sponge_params","fr_sponge_params","from","from","from_file","generic_comm","init","init","into","into","linearization","lookup_index","lookup_selectors","lookup_table","lookup_used","max_poly_size","max_quot_size","mul_comm","powers_of_alpha","psm_comm","serialize","serialize","shift","sigma_comm","srs","to_file","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","w","zkpm"],"q":["kimchi","","","","","","","","","","","kimchi::alphas","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::bench","","","","","","","","","","","","","","","","","kimchi::circuits","","","","","","","","","","","kimchi::circuits::argument","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::argument::ArgumentType","kimchi::circuits::constraints","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::constraints::GateError","","","","","kimchi::circuits::domains","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::exprkimchi::circuits::expr::Column","","","","","kimchi::circuits::expr::ConstantExpr","","","","","","","","","","","kimchi::circuits::expr::Expr","","","","","","","","","","","","kimchi::circuits::expr::PolishToken","","","","","","","kimchi::circuits::expr::constraints","kimchi::circuits::gate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::lookup","","","kimchi::circuits::lookup::constraints","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::lookup::lookups","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::lookup::tables","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials","","","","","","","","kimchi::circuits::polynomials::chacha","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials::chacha::testing","","","kimchi::circuits::polynomials::complete_add","","","","","","","","","","","","","","kimchi::circuits::polynomials::endomul_scalar","","","","","","","","","","","","","","","kimchi::circuits::polynomials::endosclmul","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials::generic","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials::generic::GenericGateSpec","","","","","","kimchi::circuits::polynomials::generic::testing","","kimchi::circuits::polynomials::permutation","kimchi::circuits::polynomials::poseidon","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::polynomials::varbasemul","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::scalars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::circuits::wires","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::error::ProofError","","kimchi::error::VerifyError","kimchi::linearization","","","kimchi::plonk_sponge","","","","","kimchi::proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::prover","kimchi::prover_index","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::prover_index::testing","kimchi::verifier","","","","","","","","","","","","","","","","","","","","","","","","","","kimchi::verifier_index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This module implements an abstraction to keep track of the …","","","This module implements the ProofError type.","This module implements the linearization.","","This module implements the data structures of a proof.","This module implements prover’s zk-proof primitive.","This module implements the prover index as ProverIndex.","This module implements zk-proof batch verifier …","This module implements the verifier index as VerifierIndex.","This type can be used to create a mapping between powers …","Wrapper around an iterator that warns you if not consumed …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","This function allows us to retrieve the powers of alpha, …","Returns a range of exponents, for a given ArgumentType, …","","","Instantiates the ranges with an actual field element <code>alpha</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Registers a new ArgumentType, associating it with a number …","","","","","","","","","","","","","The circuit size. This influences the size of the SRS. At …","","","","Produces a proof","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","This will create a context that allows for benchmarks of …","","","","","An argument is simply a number of constraints, which we …","This module implements Plonk circuit constraint primitive.","","","This module implements Plonk constraint gate primitive.","This module implement the lookup argument. See …","","This module implements Plonk prover polynomials primitive.","","This module implements Plonk prover polynomial evaluations …","This module implements Plonk circuit gate wires primitive.","The type of constraints that this will produce. This is …","The interface for a minimal argument implementation.","A constraint type represents a polynomial that will be …","The number of constraints created by the argument.","Gates in the PLONK constraint system. As gates are …","The lookup argument","The permutation argument","","","","","Returns constraints safely combined via the passed …","Returns the set of constraints required to prove this …","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","A specific gate did not verify correctly","Some connected wires have different values","Represents an error found when verifying a witness with a …","A public gate was incorrectly connected","","Shifts represent the shifts required in the permutation …","","","","","","","","","","ChaCha indexes","","","","","coefficients polynomials in evaluation form","EC point addition selector evaluations w over domain.d4","Configuration for the lookup constraint.","","creates a constraint system from a vector of gates (…","","","","","","","","","","","evaluation domains","","","","","endoscalar multiplication selector evaluations over …","coefficient for the group endomorphism","EC point addition selector evaluations w over domain.d8","Evaluates the polynomial (x - w^{n - 4}) (x - w^{n - 3}) * …","Evaluates the polynomial (x - w^{n - 3}) * (x - w^{n - 2}) …","evaluate witness polynomials over domains","","","","random oracle argument parameters","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","circuit gates","multiplication evaluations over domain.d4","","generic constraint linearization poly contribution …","generic constraint quotient poly contribution computation","produces","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","0-th Lagrange evaluated over domain.d4","0-th Lagrange evaluated over domain.d8","1-st Lagrange evaluated over domain.d8","lookup constraint system","Lookup selectors: For each kind of lookup-pattern, we have …","Lookup tables","","scalar multiplication selector evaluations over domain.d8","Generates the shifts for a given domain","permutation aggregation polynomial computation","permutation linearization poly contribution computation","permutation quotient poly contribution computation","","poseidon selector over domain.d8","poseidon constraint selector polynomial","number of public inputs","","","wire coordinate shifts","retrieve the shifts","SID polynomial","permutation polynomial array evaluations over domain d1","permutation polynomial array evaluations over domain d8","permutation polynomial array","","","","","","","","","","","","","","","The polynomial (x - w^{n - 4}) (x - w^{n - 3}) * (x - w^{n …","the polynomial that vanishes on the last four rows","This function verifies the consistency of the wire …","Function to verify the generic polynomials with a witness.","","","","","zero evaluated over domain.d8","zero evaluated over domain.d8","Computes the zero-knowledge polynomial for blinding the …","Returns the end of the circuit, which is used for …","zero-knowledge polynomial over domain.d8","zero-knowledge polynomial","","","","","","","","","","","Creates 4 evaluation domains <code>d1</code> (of size <code>n</code>), <code>d2</code> (of size <code>2n</code>…","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","A cache","","A key for a cached value","","","","A type representing one of the polynomials involved in the …","","An arithmetic expression over","The collection of constants required to evaluate an <code>Expr</code>.","","","An alias for the intended usage of the expression type in …","","","The collection of polynomials (all in evaluation form) and …","An multi-variate polynomial over the base ring <code>C</code> with …","","","","","","A “linearization”, which is linear combination with <code>E</code> …","","","","","The polynomials specific to the lookup argument.","","","","","","","","","A binary operation","For efficiency of evaluation, we compile expressions to …","","","","","","","","","UnnormalizedLagrangeBasis(i) is (x^n - 1) / (x - omega^i)","","","","A type representing a variable which can appear in a …","","","","","","The lookup aggregation polynomials.","The challenge alpha from the PLONK IOP.","The expression <code>beta</code>.","The challenge beta from the PLONK IOP.","","","","","","","","","","","","","","","","","","","","","","","","","Cache the value of the given expression","Convenience function for constructing cell variables.","","","","","","","","","","","","","","","","","","","","","The coefficient column polynomials","The column of this variable","Combines multiple constraints <code>[c0, ..., cn]</code> into a single …","Convenience function for constructing constant expressions.","","Constant values required","A number of useful constraints","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The domains used in the PLONK argument.","","","","","","","","","","","","","","The endomorphism coefficient","","","","","","","","Evaluate an expression into a field element.","Evaluate an expression as a field element against an …","Evaluate an RPN expression to a field element.","Evaluate an expression as a field element against the …","Evaluate the constant expressions in this expression down …","Evaluate the constants in a linearization with …","Compute the polynomial corresponding to this expression, …","Compute the polynomial corresponding to this expression, …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The challenge gamma from the PLONK IOP.","","","","","","","Handy function to quickly create an expression for a gate.","The index selector polynomials.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","The challenge joint_combiner which is used to combine …","Computes <code>prod_{j != 1} (1 - omega^j)</code>","The value <code>prod_{j != 1} (1 - omega^j)</code>, used for efficiently","Converts the expression in LaTeX","There is an optimization in PLONK called “linearization…","Convenience function for constructing expressions from …","Lookup specific polynomials","Apply a function to all the coefficients in the …","The MDS matrix","","","","","","","","","","","","Converts the expression in OCaml code","","","","","","Exponentiate a constant expression.","Exponentiate an expression","Compute the powers of <code>x</code>, <code>x^0, ..., x^{n - 1}</code>","You can import this module like …","The row (Curr of Next) of this variable","The lookup-type selector polynomials.","","","","","The sorted lookup table polynomials.","","","","The evaluations of the combined lookup table polynomial.","","","","","","","","","Compile an expression to an RPN expression.","Given a linearization and an environment, compute the …","Given a linearization and an environment, compute the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the given constant expression to a field element.","The polynomial which vanishes on the last 4 elements of …","","","","","","","","","","","","","Handy function to quickly create an expression for a …","The witness column polynomials","Same as witness but for the next row.","Same as witness but for the next row.","The permutation aggregation polynomial.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a constraint to enforce that b is either 0 or 1.","","ChaCha","","","","A circuit is specified as a series of CircuitGate.","A single gate in a circuit.","Complete EC addition in Affine form","","A row accessible from a given row, corresponds to the fact …","EC variable base scalar multiplication with group …","Gate for computing the scalar corresponding to an …","The different types of gates the system supports. Note …","Generic arithmetic gate","","Poseidon permutation gate","EC variable base scalar multiplication","Zero gate","","","","","","","","","","","","","","","","","public selector polynomials that can used as handy …","","This allows you to create two generic gates that will fit …","This allows you to create two generic gates by passing the …","","…","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Which lookup-patterns should be applied on which rows. …","","","","","round constant that are relevant for this specific gate","","","","","Compute the offset corresponding to the <code>CurrOrNext</code> value.","","","","","","","","","","","","","","type of the gate","","","","","","This function verifies the consistency of the wire …","Check the correctness of witness values for a complete-add …","","","verifies that the generic gate constraints are solved by …","Checks if a witness verifies a poseidon gate","","","","","","gate wiring (for each cell, what cell it is wired to)","","this function creates “empty” circuit gate","","","","Number of constraints produced by the argument.","Configuration for the lookup constraint. These values are …","The number of random values to append to columns for …","Computes the aggregation polynomial for maximum n lookups …","","","","","Specifies the lookup constraints as expressions.","","","","","A placeholder value that is known to appear in the lookup …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","The kind of lookups used","The maximum number of elements in a vector lookup","The maximum number of lookups per row","","Computes the sorted lookup tables required by the lookup …","","","","","Checks that all the lookup constraints are satisfied.","","Pad with zeroes and then add 3 random elements in the last …","","A spec for checking that the given vector belongs to a …","A spec for checking that the given vector belongs to a …","A position in the circuit relative to a given row.","Describes the desired lookup configuration.","Specifies whether a constraint system uses joint lookups. …","","Look up a single value in a lookup table. The value may be …","","","","","","","","","","","For each row in the circuit, which lookup-constraints …","","","","","","","","","","","","Create the default lookup configuration.","","","","","","","","","","","","","","","","","","","","","","Evaluate the linear combination specifying the lookup …","Evaluate the combined value of a joint-lookup, resolving …","Evaluate the combined value of a joint-lookup.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A single lookup constraint is a vector of lookup …","A map from the kind of gate (and whether it is the current …","A map from the kind of gate (and whether it is the current …","Check what kind of lookups, if any, are used by this …","The maximum joint size of any joint lookup in a constraint …","The maximum length of an element of <code>kinds</code>. This can be …","Reduce linear combinations in the lookup entries to a …","","Each entry in <code>kinds</code> has a corresponding selector …","","","","","","","","","","","","","","","","","","","","","","","","","","","Linear combination of local-positions","","","","","","","","","","","Enumerates the different ‘fixed’ lookup tables used by …","Specifies mapping from positions defined relative to gates …","Specifies the relative position of gates and the fixed …","","","","","","","","","","","","","","","","","","","","","","","Let’s say we want to do a lookup in a “vector-valued”…","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The fixed lookup table that should be used for these …","The set of positions relative to an active gate where a …","Enumerates the selector that should be active for a …","Enumerates the fixed tables that should be used for …","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluations of the wires and permutation","","","","","","","","","","","","","","","","","","","","","","","","","","","evaluations over domain d4","evaluations over domain d8","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","lookup multiset","lookup multiset","lookup multiset","lookup multiset","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","aggregation","aggregation","lookup witness","lookup witness","next wire evaluations","next wire evaluations","this wire evaluations","this wire evaluations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","wire evaluations","permutation evaluations","This module implements the ChaCha constraints.","This module implements a complete EC addition gate.","","This module implements short Weierstrass curve …","This module implements the double generic gate.","This module implements permutation constraint polynomials.","This module implements the Poseidon constraint polynomials.","This module implements short Weierstrass curve variable …","Implementation of the ChaCha0 gate","Implementation of the ChaCha1 gate","Implementation of the ChaCha2 gate","Implementation of the ChaChaFinal gate","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","The lookup table for 4-bit xor. Note that it is …","","This is just for tests. It doesn’t set up the …","","Implementation of the CompleteAdd gate It uses the …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Implementation of the EndomulScalar gate. The constraint …","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","The result of performing an endoscaling: the accumulated …","Implementation of the EndosclMul gate.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Generates the witness_curr values for a series of …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Add two values.","Number of constraints produced by the gate.","A constant, the constructor contains the constant itself","Number of coefficients used by a single generic gate Three …","Number of generic of registers by a single generic gate","The different type of computation that are possible with a …","Multiplication of two values","A public gate","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Optional coefficient that can be multiplied with the left …","Optional coefficient that can be multiplied with the …","Optional coefficient that can be multiplied with the …","Optional coefficient that can be multiplied with the …","Optional coefficient that can be multiplied with the right …","function to create a generic circuit","","Number of constraints produced by the argument.","Number of PLONK rows required to implement Poseidon","Implementation of the Poseidon gate Poseidon quotient poly …","Number of rounds","Number of rows","Width of the sponge","The order in a row in which we store states before and …","","","","","","","Returns the argument unchanged.","<code>generate_witness(row, params, witness_cols, input)</code> uses a …","","Calls <code>U::from(self)</code>.","Given a Poseidon round from 0 to 4 (inclusive), returns …","","","","","Implementation of the VarbaseMul gate","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Number of registers","GateWires document the wiring of a gate. More …","Number of registers that can be wired (participating in …","index of all registers","Wire documents the other cell that is wired to this one. …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Creates a new set of wires for a given row.","","","","","","","","","","","","","","Errors that can arise when creating a proof","","","Errors that can arise when verifying a proof","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Absorbs the field element into the sponge.","Absorbs the given evaluations into the sponge.","Creates a ScalarChallenge by squeezing the sponge.","Creates a new Fr-Sponge.","Commitments linked to the lookup feature","","","All the commitments that the prover creates as part of the …","The proof that the prover creates from a [ProverIndex] and …","lookup aggregation polynomial","","","","","","","","","","","","","","","","","","","","","","","All the polynomial commitments required in the proof","This function constructs prover’s zk-proof from the …","This function constructs prover’s recursive zk-proof …","","","","","","","","","","","","","","","","","Two evaluations over a number of committed polynomials","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Required evaluation for Maller’s optimization","evaluation of the generic selector polynomial","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","lookup-related evaluations","Commitments related to the lookup argument","This function runs the random oracle argument","evaluation of the poseidon selector polynomial","","The challenges underlying the optional polynomials folded …","batched commitment opening proof","The public input","permutation polynomials (PERMUTS-1 evaluations because the …","sorted lookup table polynomial","","The commitment to the quotient polynomial","lookup table polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","witness polynomials","The commitments to the witness (execution trace)","permutation polynomial","The commitment to the permutation polynomial","The result of a proof creation or verification.","The index used by the prover","","","this function compiles the index from constraints","constraints system polynomials","","","","","","random oracle argument parameters","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","The symbolic linearization of our circuit, which can …","maximal size of polynomial section","maximal size of the quotient polynomial according to the …","The mapping between powers of alpha and constraints","","polynomial commitment keys","","","","","Produces the VerifierIndex from the prover’s ProverIndex.","","","The result of running the oracle protocol","The result of a proof verification.","the computed powers of alpha","This function verifies the batch of zk-proofs proofs: …","","","Used by the OCaml side","","","the last evaluation of the Fq-Sponge in this protocol","","A sponge that acts on the base field of a curve","Returns the argument unchanged.","The evaluation f(zeta) - t(zeta) * Z_H(zeta)","","Calls <code>U::from(self)</code>.","the challenges produced in the protocol","public polynomial evaluations","?","zeta^n and (zeta * omega)^n","","","","Verify a proof ProverProof using a VerifierIndex and a …","","pre-computed zeta^n","","","","","","","Chacha polynomial commitments","coefficient commitment array","EC addition selector polynomial commitment","","","","","","","evaluation domain","","","endoscalar multiplication selector polynomial commitment","endoscalar coefficient","endoscalar multiplication scalar computation selector …","","","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a VerifierIndex from a file, given a pointer …","coefficient commitment array","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","maximal size of polynomial section","maximal size of the quotient polynomial according to the …","EC variable base scalar multiplication selector polynomial …","The mapping between powers of alpha and constraints","poseidon constraint selector polynomial commitment","","","wire coordinate shifts","permutation commitment array","polynomial commitment keys","Writes a VerifierIndex to a file, potentially appending it …","","","","","","","","","domain offset for zero-knowledge","zero-knowledge polynomial"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,1,1,1,2,1,2,1,1,2,2,1,1,2,1,2,1,1,1,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,2,1,2,1,2,1,2,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,4,0,0,4,5,5,5,5,5,5,5,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,0,7,7,0,7,0,0,0,8,9,10,7,8,9,10,7,10,9,10,9,10,10,10,9,9,10,8,9,10,7,8,9,10,7,9,10,10,8,9,10,7,10,10,10,0,0,10,9,10,7,10,8,9,10,7,10,10,10,10,10,10,8,9,10,7,8,9,10,7,10,10,10,10,9,9,9,10,8,10,10,10,10,10,10,10,9,10,10,8,10,10,10,10,9,10,8,9,10,7,8,9,10,7,8,9,10,7,0,10,10,10,8,9,10,7,10,10,0,0,10,10,11,12,11,13,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,16,17,15,17,15,17,18,0,18,0,18,17,19,0,18,0,0,18,17,0,15,17,0,0,15,17,19,15,17,0,15,17,17,19,0,19,19,19,15,17,15,16,17,0,0,15,18,17,18,17,15,16,17,18,17,18,17,0,19,19,15,18,18,20,21,18,21,21,20,22,19,23,15,24,25,16,18,17,26,21,20,22,19,23,15,24,25,16,18,17,26,25,18,19,23,15,24,16,18,17,26,19,23,15,24,16,18,17,26,19,23,24,0,22,23,18,18,26,22,0,25,26,21,20,22,19,23,15,24,25,16,18,17,26,21,20,22,19,23,15,24,25,16,18,17,26,19,23,17,26,22,18,21,20,22,19,23,15,24,25,16,18,17,26,21,19,23,15,24,16,18,17,18,18,17,18,18,26,18,18,19,23,15,24,16,18,17,26,21,20,22,19,23,15,24,25,16,18,18,18,17,26,21,19,23,24,19,23,24,0,22,26,21,20,22,19,23,15,24,25,16,18,17,26,21,20,22,19,23,15,24,25,16,18,17,26,15,18,15,18,21,0,22,18,18,18,22,26,21,15,18,18,19,23,15,24,18,17,15,18,18,15,18,19,23,24,15,18,0,0,23,20,19,23,17,26,20,18,15,18,20,19,23,15,24,16,18,17,26,18,26,26,21,20,22,19,23,15,24,25,16,18,17,26,21,20,22,19,23,15,24,25,16,18,17,26,21,20,22,19,23,15,24,25,16,18,17,26,15,22,21,20,22,19,23,15,24,25,16,18,17,26,0,22,0,0,22,15,18,27,28,29,30,31,32,33,34,35,36,33,34,35,36,37,37,38,39,40,41,42,43,44,45,42,44,45,42,46,47,48,49,50,51,51,0,52,53,53,53,53,0,0,53,54,0,53,53,0,53,54,53,53,53,54,53,55,52,54,53,55,52,54,53,55,54,53,55,54,53,55,55,55,55,55,55,55,54,53,55,52,54,53,55,52,54,53,55,54,53,55,52,55,54,53,54,53,55,54,53,55,52,53,53,54,53,54,53,54,53,55,52,54,53,55,52,53,53,54,53,55,55,54,53,55,52,54,53,54,53,55,53,54,53,55,52,54,53,55,52,55,54,53,55,52,55,55,55,55,55,55,55,55,54,53,55,52,55,55,55,0,0,0,0,0,0,0,56,56,56,56,0,56,56,56,56,56,56,56,56,56,56,56,56,56,0,56,56,56,56,0,56,0,57,0,0,0,0,0,57,0,57,58,59,60,61,57,58,59,60,61,58,57,58,59,60,61,57,58,59,60,61,59,58,57,58,59,60,61,57,58,59,60,61,57,58,59,60,61,57,58,59,60,61,61,60,61,61,57,59,57,58,59,60,61,57,58,59,60,61,57,58,59,60,61,58,58,58,58,58,58,61,59,58,57,58,59,60,61,61,57,58,59,60,61,57,58,59,60,61,57,58,59,60,61,57,58,59,60,61,60,57,58,59,60,61,62,63,0,0,64,0,0,0,0,64,0,65,66,67,65,62,63,66,67,65,62,63,65,62,63,65,62,63,62,63,0,66,67,65,62,63,66,67,65,62,63,65,66,67,65,62,63,65,62,63,64,62,63,65,62,63,66,67,65,62,63,66,66,67,67,65,62,63,0,65,62,63,66,67,65,62,63,66,67,65,62,63,62,63,62,63,65,65,62,63,66,67,65,62,63,66,67,65,62,63,66,67,65,62,63,66,67,65,62,63,0,0,0,0,0,0,68,69,70,71,72,73,68,69,70,71,72,73,68,69,70,71,72,73,68,69,70,71,72,73,70,70,68,69,70,71,72,73,68,69,70,71,72,73,68,69,70,71,72,73,68,69,70,71,72,73,71,73,71,73,68,69,70,71,72,73,68,69,70,71,72,73,71,73,71,73,69,72,69,72,68,69,70,71,72,73,68,69,70,71,72,73,68,69,70,71,72,73,68,69,70,71,72,73,68,69,70,71,72,73,68,68,0,0,0,0,0,0,0,0,0,0,0,0,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,0,74,75,76,77,74,75,76,77,74,75,76,77,74,75,76,77,0,0,0,0,0,78,78,78,78,78,78,78,78,78,78,78,78,78,0,79,79,79,79,79,79,79,0,79,79,79,79,79,79,0,0,80,81,80,81,80,81,81,80,81,80,81,80,81,80,0,81,80,81,80,80,81,80,81,80,81,80,81,80,82,0,82,0,0,0,82,82,82,82,82,82,82,82,82,82,0,82,82,82,82,83,84,85,84,85,84,0,0,0,0,0,0,0,0,0,86,86,86,86,86,86,86,0,86,86,0,86,86,86,86,0,0,87,87,88,87,88,88,87,88,87,88,87,88,87,88,87,88,87,88,87,87,88,87,88,87,88,87,88,0,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,0,0,0,0,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,92,91,92,0,92,92,0,92,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,92,91,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,93,94,95,0,0,0,0,96,96,96,96,0,0,0,0,0,97,98,97,99,98,100,101,97,99,98,100,101,97,99,98,100,101,97,99,98,100,101,99,101,101,101,97,99,98,100,101,97,99,98,100,101,97,99,98,100,101,99,101,97,99,98,100,101,101,99,97,99,98,100,101,97,99,98,100,101,99,100,101,99,101,101,101,101,99,97,98,100,97,97,99,98,100,101,97,99,98,100,101,97,99,98,100,101,97,99,98,100,101,97,99,98,100,101,99,100,99,100,0,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0,102,102,102,102,102,0,0,0,103,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,103,103,0,0,104,105,104,105,105,105,105,104,105,104,105,104,105,105,104,105,105,105,105,105,105,104,105,105,105,104,105,104,105,105,105,104,104,104,105,105,105,105,105,104,105,105,105,105,105,104,105,104,105,104,105,104,105,105,105],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["alphas",3]],[[["",0],["",0]]],[[],["alphas",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["argumenttype",4],["u32",0]],["mustconsumeiterator",3,[["cloned",3,[["take",3,[["skip",3,[["iter",3]]]]]]]]]],[[["",0],["argumenttype",4],["u32",0]],["mustconsumeiterator",3,[["range",3,[["u32",0]]],["u32",0]]]],[[],["usize",0]],[[],["usize",0]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["option",4]],[[["",0],["argumenttype",4],["u32",0]]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,[[["",0],["vec",3,[["proverproof",3,[["affine",6]]]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["proverproof",3,[["affine",6]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[["usize",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["argumenttype",4]],[[["",0],["",0]]],[[["alphas",3]],["e",6]],[[],["vec",3,[["e",6]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["argumenttype",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[],["usize",0]],[[]],[[["",0],["argumenttype",4]],["bool",0]],[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["lookupconstraintsystem",3]],[[["",0]],["constraintsystem",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,[[["vec",3,[["vec",3,[["vec",3]]]]],["evaluationdomains",3]],["option",4]],[[["vec",3,[["circuitgate",3]]],["vec",3,[["vec",3,[["vec",3]]]]],["arithmeticspongeparams",3],["usize",0]],["option",4]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],null,[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,null,null,[[["d",3,[["fftfield",8]]],["fftfield",8]],["fftfield",8]],[[["d",3,[["fftfield",8]]],["fftfield",8]],["fftfield",8]],[[["",0],["dp",3]],["witnessoverdomains",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],null,null,null,[[["",0]],["evaluations",3,[["d",3]]]],[[["",0]],["evaluations",3,[["d",3]]]],[[],["vec",3]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[["d",3]]],[[["",0],["",0],["",0]],["result",4,[["densepolynomial",3],["prooferror",4]]]],[[["",0]],["densepolynomial",3]],[[["",0],["witnessoverdomains",3],["densepolynomial",3]],["result",4,[["prooferror",4]]]],[[]],null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[["",0]]],null,null,null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["d",3,[["fftfield",8]]]],["dp",3,[["fftfield",8]]]],null,[[["",0]],["result",4,[["gateerror",4]]]],[[["",0],["densepolynomial",3]],["bool",0]],[[]],[[]],[[]],[[]],null,null,[[["d",3,[["fftfield",8]]]],["dp",3,[["fftfield",8]]]],[[["d",3,[["fftfield",8]]]],["fftfield",8]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["evaluationdomains",3]],[[["",0],["",0]]],[[["usize",0]],["option",4]],null,null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["",0]]],null,null,[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["expr",4]],["expr",4]],[[["column",4],["currornext",4]],["expr",4]],[[["",0]],["column",4]],[[["",0]],["variable",3]],[[["",0]],["constantexpr",4]],[[["",0]],["cacheid",3]],[[["",0]],["op2",4]],[[["",0]],["expr",4]],[[["",0]],["polishtoken",4]],[[["",0]],["linearization",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["column",4]],["ordering",4]],[[["",0],["variable",3]],["ordering",4]],[[["",0],["cacheid",3]],["ordering",4]],[[["usize",0]],["e",6]],null,null,[[["vec",3]]],[[],["expr",4]],null,null,null,[[],["cache",3]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,[[["",0],["column",4]],["bool",0]],[[["",0],["variable",3]],["bool",0]],[[["",0],["constantexpr",4]],["bool",0]],[[["",0],["cacheid",3]],["bool",0]],[[["",0],["op2",4]],["bool",0]],[[["",0],["expr",4]],["bool",0]],[[["",0],["polishtoken",4]],["bool",0]],[[["",0],["d",3]],["result",4,[["str",0]]]],[[["",0],["d",3],["environment",3]],["result",4,[["str",0]]]],[[["d",3],["constants",3]],["result",4,[["str",0]]]],[[["",0],["d",3],["constants",3]],["result",4,[["str",0]]]],[[["",0],["environment",3]],["expr",4]],[[["",0],["environment",3]],["linearization",3,[["expr",4]]]],[[["",0],["environment",3]],["evaluations",3,[["d",3]]]],[[["",0],["environment",3]],["evaluations",3,[["d",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",0]]],[[["u64",0]]],[[]],[[]],[[]],null,[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["gatetype",4]],["e",6]],null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],null,[[["d",3,[["fftfield",8]]]],["fftfield",8]],null,[[["",0]],["vec",3,[["string",3]]]],[[["",0],["hashset",3,[["column",4]]]],["result",4,[["linearization",3,[["expr",4]]],["str",0]]]],[[]],null,[[["",0],["fn",8]],["linearization",3]],null,[[]],[[]],[[]],[[["",0],["column",4]],["bool",0]],[[["",0],["variable",3]],["bool",0]],[[["",0],["constantexpr",4]],["bool",0]],[[["",0],["cacheid",3]],["bool",0]],[[["",0],["expr",4]],["bool",0]],[[["",0],["polishtoken",4]],["bool",0]],[[],["constantexpr",4]],[[],["expr",4]],[[["",0]],["string",3]],[[]],[[]],[[["",0],["column",4]],["option",4,[["ordering",4]]]],[[["",0],["variable",3]],["option",4,[["ordering",4]]]],[[["",0],["cacheid",3]],["option",4,[["ordering",4]]]],[[["u64",0]]],[[["u64",0]]],[[["field",8],["usize",0]],["vec",3,[["field",8]]]],null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[]],[[]],[[]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["vec",3,[["polishtoken",4]]]],[[["",0],["environment",3]]],[[["",0],["environment",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["constants",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0],["currornext",4]],["e",6]],null,[[["usize",0]],["e",6]],[[["usize",0]],["e",6]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["e",6]],["e",6,[["field",8]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["currornext",4]],[[["",0]],["gatetype",4]],[[["",0]],["circuitgate",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["currornext",4]],["ordering",4]],[[["",0],["gatetype",4]],["ordering",4]],null,[[["gatewires",6]]],[[["gatewires",6]]],[[["gatewires",6],["genericgatespec",4],["option",4,[["genericgatespec",4]]]]],[[["gatewires",6]]],[[["usize",0]]],[[],["vec",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0]]],[[["",0],["currornext",4]],["bool",0]],[[["",0],["gatetype",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["i64",0]],["option",4]],[[["u64",0]],["option",4]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,[["gateslookupspec",3]]]],["gateslookupmaps",3]],[[["",0],["currornext",4]],["option",4,[["ordering",4]]]],[[["",0],["gatetype",4]],["option",4,[["ordering",4]]]],[[["",0]]],[[["",0]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["usize",0]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["option",4,[["u64",0]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],[[["",0],["usize",0],["constraintsystem",3]],["result",4,[["string",3]]]],[[["",0],["usize",0]],["result",4,[["string",3]]]],[[["",0],["usize",0],["constraintsystem",3]],["result",4,[["string",3]]]],[[["",0],["usize",0],["constraintsystem",3]],["result",4,[["string",3]]]],[[["",0],["usize",0]],["result",4,[["string",3]]]],[[["",0],["usize",0],["constraintsystem",3]],["result",4,[["string",3]]]],[[["",0],["usize",0]],["result",4,[["string",3]]]],[[]],[[]],[[]],[[]],null,[[["",0],["write",8]],["ioresult",6]],[[["gatewires",6]]],null,null,null,null,null,null,[[["fftfield",8],["iterator",8],["d",3,[["fftfield",8]]],["fftfield",8],["fftfield",8],["fftfield",8],["",0]],["result",4,[["evaluations",3,[["fftfield",8],["d",3,[["fftfield",8]]]]],["prooferror",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["lookupconfiguration",3]],[[["",0],["",0]]],[[["lookupconfiguration",3],["d",3,[["fftfield",8]]]],["vec",3,[["e",6,[["fftfield",8]]]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],null,null,null,[[["",0]],["result",4]],[[["",26,[["entry",8],["eq",8],["hash",8],["clone",8]]],["fn",8],["d",3,[["fftfield",8]]]],["result",4,[["vec",3,[["vec",3,[["",26,[["entry",8],["eq",8],["hash",8],["clone",8]]]]]]],["prooferror",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["fftfield",8],["fn",8],["usize",0],["d",3,[["fftfield",8]]],["fftfield",8]]],[[]],[[["vec",3,[["fftfield",8]]],["d",3,[["fftfield",8]]],["",0]],["evaluations",3,[["fftfield",8],["d",3,[["fftfield",8]]]]]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vec",3,[["vec",3]]]],[[["",0]],["lookupsused",4]],[[["",0]],["lookupinfo",3]],[[["",0]],["localposition",3]],[[["",0]],["singlelookup",3]],[[["",0]],["jointlookup",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,[[["",0],["fn",8]]],[[["",0],["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["",0]],["option",4,[["lookupsused",4]]]],null,null,[[["",0],["",0]],["jointlookup",3]],null,[[["",0],["evaluationdomains",3]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["gatelookuptable",4]],[[["",0]],["combinedentry",3]],[[["",0]],["uncombinedentry",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["combinedentry",3]],["ordering",4]],[[["",0],["uncombinedentry",3]],["ordering",4]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["gatelookuptable",4]],["bool",0]],[[["",0],["combinedentry",3]],["bool",0]],[[["",0],["uncombinedentry",3]],["bool",0]],[[["jointlookupspec",6],["usize",0]]],[[["",0],["jointlookupspec",6],["usize",0]],["combinedentry",3]],[[["jointlookupspec",6],["usize",0]],["uncombinedentry",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["gatelookuptable",4]],["lookuptable",6,[["fftfield",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[["",0],["combinedentry",3]],["bool",0]],[[["",0],["uncombinedentry",3]],["bool",0]],[[["",0],["combinedentry",3]],["option",4,[["ordering",4]]]],[[["",0],["uncombinedentry",3]],["option",4,[["ordering",4]]]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["witnessevals",3]],[[["",0]],["witnessshifts",3]],[[["",0]],["witnessoverdomains",3]],[[["",0]],["lookupevals",3]],[[["",0]],["lookupshifts",3]],[[["",0]],["lookuppolys",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["vec",3,[["e",6]]]],[[],["vec",3,[["e",6]]]],[[],["vec",3,[["e",6]]]],[[],["vec",3,[["e",6]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[],["vec",3,[["vec",3,[["field",8]]]]]],[[["vec",3,[["u32",0]]]],["vec",3,[["u32",0]]]],[[],["vec",3,[["gatetype",4]]]],[[["vec",3,[["u32",0]]]],["vec",3,[["vec",3,[["fftfield",8]]]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["vec",3,[["e",6]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["vec",3,[["e",6]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[["",26,[["primefield",8],["display",8]]],["",26,[["primefield",8],["display",8]]],["usize",0]],["",26,[["primefield",8],["display",8]]]],[[],["usize",0]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["vec",3,[["e",6]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[["usize",0],["",26,[["field",8],["display",8]]]],["endomulresult",3,[["",26,[["field",8],["display",8]]]]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,[[["usize",0],["usize",0]],["vec",3,[["circuitgate",3,[["fftfield",8]]]]]],[[["usize",0]]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["vec",3,[["e",6]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[["usize",0],["arithmeticspongeparams",3,[["field",8]]]]],[[],["usize",0]],[[]],[[["usize",0]],["range",3,[["usize",0]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["vec",3,[["e",6]]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[["usize",0]],["varbasemulresult",3,[["",26,[["fftfield",8],["display",8]]]]]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["randomoracles",3]],[[["",0],["",0]]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[],["usize",0]],[[]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["wire",3]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["wire",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["wire",3]],["bool",0]],[[["usize",0]]],[[["read",8]],["ioresult",6]],null,[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["",0],["write",8]],["ioresult",6]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["prooferror",4]],[[["",0]],["verifyerror",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,[[["d",3,[["",26,[["fftfield",8],["squarerootfield",8]]]]],["bool",0],["option",4,[["lookupconfiguration",3]]]]],[[["d",3,[["",26,[["fftfield",8],["squarerootfield",8]]]]],["bool",0],["option",4,[["lookupconfiguration",3]]]]],[[["option",4,[["lookupconfiguration",3]]]],["hashset",3,[["column",4]]]],null,[[["",0],["",0]]],[[["",0],["proofevaluations",3]]],[[["",0]],["scalarchallenge",3]],[[["arithmeticspongeparams",3]]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["lookupevaluations",3]],[[["",0]],["proofevaluations",3]],[[["",0]],["lookupcommitments",3]],[[["",0]],["provercommitments",3]],[[["",0]],["proverproof",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["proofevaluations",3]],null,[[["proverindex",3]],["result",6]],[[["proverindex",3],["vec",3]],["result",6]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[],["proofevaluations",3]],null,[[]],[[]],[[]],[[]],[[]],null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0],["verifierindex",3],["polycomm",3]],["result",6,[["oraclesresult",3,[["",26,[["clone",8],["fqsponge",8,[["basefield",6],["scalarfield",6]]]]]]]]]],null,[[["",0],["verifierindex",3]],["vec",3,[["vec",3,[["vec",3,[["scalarfield",6]]]]]]]],null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["constraintsystem",3,[["scalarfield",6]]],["arithmeticspongeparams",3,[["basefield",6]]],["scalarfield",6],["arc",3,[["srs",3]]]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[],["usize",0]],[[]],null,null,null,null,[[["",0]],["result",4]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["verifierindex",3]],[[]],[[["vec",3,[["circuitgate",3,[["fp",6]]]]],["usize",0]],["proverindex",3,[["affine",6]]]],null,null,null,[[],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],null,[[["usize",0]]],null,[[]],null,[[],["usize",0]],[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["verifierindex",3],["proverproof",3]],["result",6]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[],["result",4]],null,[[["usize",0]]],[[["usize",0]]],null,null,null,null,null,[[]],[[]],[[["arc",3,[["srs",3]]],["path",3],["option",4,[["u64",0]]],["arithmeticspongeparams",3,[["basefield",6]]],["arithmeticspongeparams",3,[["scalarfield",6]]]],["result",4,[["string",3]]]],null,[[],["usize",0]],[[],["usize",0]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],null,null,null,[[["",0],["path",3],["option",4,[["bool",0]]]],["result",4,[["string",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null],"p":[[3,"Alphas"],[3,"MustConsumeIterator"],[3,"BenchmarkCtx"],[8,"Argument"],[4,"ArgumentType"],[13,"Gate"],[4,"GateError"],[3,"Shifts"],[3,"LookupConstraintSystem"],[3,"ConstraintSystem"],[13,"DisconnectedWires"],[13,"IncorrectPublic"],[13,"Custom"],[3,"EvaluationDomains"],[4,"ConstantExpr"],[4,"Op2"],[4,"PolishToken"],[4,"Expr"],[4,"Column"],[3,"LookupEnvironment"],[3,"Constants"],[3,"Environment"],[3,"Variable"],[3,"CacheId"],[3,"Cache"],[3,"Linearization"],[13,"Witness"],[13,"LookupSorted"],[13,"LookupKindIndex"],[13,"Index"],[13,"Coefficient"],[13,"Literal"],[13,"Pow"],[13,"Add"],[13,"Mul"],[13,"Sub"],[13,"Mds"],[13,"Constant"],[13,"Cell"],[13,"Double"],[13,"Square"],[13,"BinOp"],[13,"UnnormalizedLagrangeBasis"],[13,"Pow"],[13,"Cache"],[13,"Literal"],[13,"Cell"],[13,"Pow"],[13,"UnnormalizedLagrangeBasis"],[13,"Load"],[13,"Mds"],[3,"Circuit"],[4,"GateType"],[4,"CurrOrNext"],[3,"CircuitGate"],[3,"LookupConfiguration"],[4,"LookupsUsed"],[3,"LookupInfo"],[3,"LocalPosition"],[3,"SingleLookup"],[3,"JointLookup"],[3,"CombinedEntry"],[3,"UncombinedEntry"],[8,"Entry"],[4,"GateLookupTable"],[3,"GatesLookupSpec"],[3,"GatesLookupMaps"],[3,"WitnessEvals"],[3,"WitnessShifts"],[3,"WitnessOverDomains"],[3,"LookupEvals"],[3,"LookupShifts"],[3,"LookupPolys"],[3,"ChaCha0"],[3,"ChaCha1"],[3,"ChaCha2"],[3,"ChaChaFinal"],[3,"CompleteAdd"],[3,"EndomulScalar"],[3,"EndoMulResult"],[3,"EndosclMul"],[4,"GenericGateSpec"],[13,"Const"],[13,"Add"],[13,"Mul"],[3,"Poseidon"],[3,"VarbaseMulResult"],[3,"VarbaseMul"],[3,"RandomOracles"],[3,"Wire"],[4,"VerifyError"],[4,"ProofError"],[13,"Prover"],[13,"Permutation"],[13,"IncorrectCommitmentLength"],[8,"FrSponge"],[3,"LookupEvaluations"],[3,"LookupCommitments"],[3,"ProofEvaluations"],[3,"ProverCommitments"],[3,"ProverProof"],[3,"ProverIndex"],[3,"OraclesResult"],[3,"LookupVerifierIndex"],[3,"VerifierIndex"]]},\
"kimchi_visu":{"doc":"Implements a tool to visualize a circuit as an HTML page.","t":[5,5,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["latex_constraints","visu","witness","Witness","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","from","init","inner","into","new","serialize","try_from","try_into","type_id","vzip"],"q":["kimchi_visu","","","kimchi_visu::witness","","","","","","","","","","","","","","","","",""],"d":["","Produces a <code>circuit.html</code> in the current folder.","","The type that represents the execution trace. It …","","","","","","","Returns the argument unchanged.","","","Returns the inner witness.","Calls <code>U::from(self)</code>.","Creates a new witness with <code>rows</code> rows.","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[[[],["hashmap",3,[["str",0],["vec",3,[["vec",3,[["string",3]]]]]]]],[[["proverindex",3],["option",4,[["witness",3,[["scalarfield",6]]]]]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[]],[[]],[[["usize",0]]],[[["",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[3,"Witness"]]},\
"mina_curves":{"doc":"","t":[0,6,3,6,3,0,0,0,0,6,3,11,11,11,11,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,11,11,11,11,6,17,17,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,17,17,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["pasta","Fp","FpParameters","Fq","FqParameters","fp","fq","pallas","vesta","Fp","FpParameters","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","Fq","FqParameters","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","Affine","G_GENERATOR_X","G_GENERATOR_Y","PallasParameters","Projective","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","from","init","into","mul_by_a","to_owned","try_from","try_into","type_id","vzip","Affine","G_GENERATOR_X","G_GENERATOR_Y","Projective","VestaParameters","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","from","init","into","mul_by_a","to_owned","try_from","try_into","type_id","vzip"],"q":["mina_curves","mina_curves::pasta","","","","","","","","mina_curves::pasta::fp","","","","","","","","","","","","","","mina_curves::pasta::fq","","","","","","","","","","","","","","mina_curves::pasta::pallas","","","","","","","","","","","","","","","","","","","","","","","mina_curves::pasta::vesta","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","G_GENERATOR_X = 1","G1_GENERATOR_Y = …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","G_GENERATOR_X = 1","G1_GENERATOR_Y = …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["pallasparameters",3]],[[["",0],["",0]]],[[],["pallasparameters",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["pallasparameters",3]],["bool",0]],[[]],[[],["usize",0]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vestaparameters",3]],[[["",0],["",0]]],[[],["vestaparameters",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["vestaparameters",3]],["bool",0]],[[]],[[],["usize",0]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[3,"FpParameters"],[3,"FqParameters"],[3,"PallasParameters"],[3,"VestaParameters"]]},\
"mina_hasher":{"doc":"Mina hasher","t":[16,8,6,8,8,5,5,10,10,11,10,11,10,0,10,0,10,10,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["D","DomainParameter","Fp","Hashable","Hasher","create_kimchi","create_legacy","digest","domain_string","hash","init","init_and_hash","into_bytes","poseidon","reset","roinput","to_roinput","update","Poseidon","PoseidonHasherKimchi","PoseidonHasherLegacy","borrow","borrow_mut","deref","deref_mut","digest","drop","from","init","init","into","reset","try_from","try_into","type_id","update","vzip","ROInput","append_bool","append_bytes","append_field","append_hashable","append_roinput","append_scalar","append_u32","append_u64","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","fmt","from","init","into","ne","new","to_bytes","to_fields","to_owned","try_from","try_into","type_id","vzip"],"q":["mina_hasher","","","","","","","","","","","","","","","","","","mina_hasher::poseidon","","","","","","","","","","","","","","","","","","","mina_hasher::roinput","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Generic domain string argument type","The domain parameter trait is used during hashing to …","","Interface for hashable objects","Interface for hashing <code>Hashable</code> inputs","Create an experimental kimchi hasher context","Create a legacy hasher context","Obtain has result output","Generate unique domain string of length <code>&lt;= 20</code>.","Hash input and obtain result output","Set the initial state based on domain separation string …","Initialize state, hash input and obtain result output","Conversion into vector of bytes","Mina Poseidon hasher","Restore the initial state that was set most recently","Random oracle input structures and algorithms","Serialization to random oracle input","Consume hash <code>input</code>","Poseidon hasher context","Poseidon hasher type with experimental kimchi plonk sponge …","Poseidon hasher type with legacy plonk sponge constants","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Random oracle input structure","Append a single bit","Append bytes","Append a base field element","Append a <code>Hashable</code> input","Append another random oracle input","Append a scalar field element","Append a 32-bit unsigned integer","Append a 64-bit unsigned integer","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Create a new empty random oracle input","Serialize random oracle input to bytes","Serialize random oracle input to vector of base field …","","","","",""],"i":[1,0,0,0,0,0,0,2,1,2,2,2,3,0,2,0,1,2,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,[[],["poseidonhasherkimchi",6,[["hashable",8]]]],[[],["poseidonhasherlegacy",6,[["hashable",8]]]],[[["",0]],["fp",6]],[[],["option",4,[["string",3]]]],[[["",0],["",0]],["fp",6]],[[["",0]],["hasher",8]],[[["",0],["",0]],["fp",6]],[[],["vec",3,[["u8",0]]]],null,[[["",0]],["hasher",8]],null,[[["",0]],["roinput",3]],[[["",0],["",0]],["hasher",8]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0]],["fp",6]],[[["usize",0]]],[[]],[[["",0]],["hasher",8]],[[],["usize",0]],[[]],[[["",0]],["hasher",8]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["",0]],["hasher",8]],[[]],null,[[["",0],["bool",0]],["",0]],[[["",0]],["",0]],[[["",0],["fp",6]],["",0]],[[["",0]],["",0]],[[["",0],["roinput",3]],["",0]],[[["",0],["fq",6]],["",0]],[[["",0],["u32",0]],["",0]],[[["",0],["u64",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["roinput",3]],[[["",0],["",0]]],[[],["roinput",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["roinput",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["roinput",3]],["bool",0]],[[]],[[["",0]],["vec",3,[["u8",0]]]],[[["",0]],["vec",3,[["fp",6]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[8,"Hashable"],[8,"Hasher"],[8,"DomainParameter"],[3,"Poseidon"],[3,"ROInput"]]},\
"mina_signer":{"doc":"Mina signer","t":[6,6,13,4,6,8,13,11,11,11,11,5,5,11,11,11,11,11,11,11,0,0,0,0,10,0,11,11,11,11,10,11,3,4,13,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,3,17,13,3,4,6,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11],"n":["BaseField","CurvePoint","MAINNET","NetworkId","ScalarField","Signer","TESTNET","borrow","borrow_mut","clone","clone_into","create_kimchi","create_legacy","deref","deref_mut","drop","from","init","into","into_bytes","keypair","pubkey","schnorr","seckey","sign","signature","to_owned","try_from","try_into","type_id","verify","vzip","Keypair","KeypairError","NonCurvePoint","Result","SecretKeyBytes","SecretKeyHex","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","fmt","fmt","from","from","from_hex","from_parts_unsafe","get_address","init","init","into","into","ne","public","rand","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AddressBase58","AddressChecksum","AddressLength","AddressRawByteLength","AddressVersion","CompressedPubKey","MINA_ADDRESS_LEN","NonCurvePoint","PubKey","PubKeyError","Result","XCoordinate","XCoordinateBytes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from_address","from_point_unsafe","init","init","init","into","into","into","into_address","into_address","into_compressed","into_point","is_odd","ne","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","x","Schnorr","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","sign","try_from","try_into","type_id","verify","vzip","SecKey","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","from","init","into","into_scalar","ne","new","rand","to_owned","try_from","try_into","type_id","vzip","Signature","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","fmt","from","init","into","ne","new","rx","s","to_owned","to_string","try_from","try_into","type_id","vzip"],"q":["mina_signer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_signer::keypair","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_signer::pubkey","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mina_signer::schnorr","","","","","","","","","","","","","","","mina_signer::seckey","","","","","","","","","","","","","","","","","","","","","mina_signer::signature","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Base field element type","Affine curve point type","Id for mainnet","Mina network (or blockchain) identifier","Scalar field element type","Interface for signed objects","Id for all testnets","","","","","Create an experimental kimchi signer context with domain …","Create a legacy signer context with domain parameters …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Keypair structures and algorithms","Public key structures and algorithms","Mina Schnorr signature scheme","Secret key structures and helpers","Sign <code>input</code> (see <code>Hashable</code>) using keypair <code>kp</code> and return the …","Mina signature structure and associated helpers","","","","","Verify that the signature <code>sig</code> on <code>input</code> (see <code>Hashable</code>) is …","","Keypair structure","Keypair error","point not on curve","Keypair result","Invalid secret key bytes","Invalid secret key hex","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a keypair from secret key hex","Create a keypair from scalar field <code>secret</code> element and …","Obtain the Mina address corresponding to the keypair’s …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Public key","Generate a random keypair","","","","","","","","","","","","","Invalid address base58","Invalid address checksum","Invalid address length","Invalid raw address bytes length","Invalid address version","Compressed public keys consist of x-coordinate and …","Length of Mina addresses","Point not on curve","Public key","Public key errors","Public key Result","Invalid x-coordinate","Invalid x-coordinate bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize Mina address into public key","Create a public key from curve point Note: Does not check …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Serialize public key into corresponding Mina address","Serialize compressed public key into corresponding Mina …","Convert public key into compressed public key","Convert public key into curve point","Parity of y-coordinate","","","","","","","","","","","","","","","","","","","X-coordinate","Schnorr signer context for the Mina signature algorithm","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Secret key","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Convert secret key into scalar field element","","Create a secret key from scalar field element","Generate a random secret key","","","","","","Signature structure","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Create a new signature","Base field component","Scalar field component","","","","","",""],"i":[0,0,1,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,2,0,1,1,1,1,2,1,0,0,3,0,3,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,4,4,4,3,4,3,4,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,5,5,5,5,5,0,0,5,0,0,0,5,5,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,7,5,6,5,5,6,6,5,6,7,6,6,5,6,7,5,6,7,6,7,6,6,7,6,5,6,7,5,6,5,6,7,5,6,7,5,6,7,5,6,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"f":[null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["networkid",4]],[[["",0],["",0]]],[[]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[],["vec",3,[["u8",0]]]],null,null,null,null,[[["",0],["keypair",3],["",0]],["signature",3]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["signature",3],["pubkey",3],["",0]],["bool",0]],[[]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["keypairerror",4]],[[["",0]],["keypair",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["keypairerror",4]],["bool",0]],[[["",0],["keypair",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["str",0]],["result",6]],[[["scalarfield",6],["curvepoint",6]]],[[],["string",3]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0],["keypair",3]],["bool",0]],null,[[]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["pubkeyerror",4]],[[["",0]],["pubkey",3]],[[["",0]],["compressedpubkey",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["pubkeyerror",4]],["bool",0]],[[["",0],["pubkey",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["str",0]],["result",6]],[[["curvepoint",6]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["compressedpubkey",3]],[[],["curvepoint",6]],null,[[["",0],["pubkey",3]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],[[["",0],["keypair",3],["",0]],["signature",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["signature",3],["pubkey",3],["",0]],["bool",0]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["seckey",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["seckey",3]],["bool",0]],[[]],[[],["usize",0]],[[]],[[],["scalarfield",6]],[[["",0],["seckey",3]],["bool",0]],[[["scalarfield",6]]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["signature",3]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["signature",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[["",0],["signature",3]],["bool",0]],[[["basefield",6],["scalarfield",6]]],null,null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[4,"NetworkId"],[8,"Signer"],[4,"KeypairError"],[3,"Keypair"],[4,"PubKeyError"],[3,"PubKey"],[3,"CompressedPubKey"],[3,"Schnorr"],[3,"SecKey"],[3,"Signature"]]},\
"o1_utils":{"doc":"","t":[0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,8,10,10,10,10,8,10,10,10,10,13,13,8,4,6,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,10,10,10,11,11,11,11,11,11,8,18,11,5,3,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,5,5,6,6,0],"n":["chunked_polynomial","dense_polynomial","evaluations","field_helpers","hasher","math","serialization","types","ChunkedPolynomial","borrow","borrow_mut","deref","deref_mut","drop","evaluate_chunks","from","init","into","linearize","polys","size","try_from","try_into","type_id","vzip","ExtendedDensePolynomial","eval_polynomial","scale","shiftr","to_chunked_polynomial","ExtendedEvaluations","pow","scale","shift","square","DecodeHex","DeserializeBytes","FieldHelpers","FieldHelpersError","Result","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","fmt","from","from_bits","from_bytes","from_hex","init","into","size_in_bytes","to_bits","to_bytes","to_hex","to_owned","to_string","try_from","try_into","type_id","vzip","CryptoDigest","PREFIX","digest","ceil_log2","SerdeAs","borrow","borrow_mut","deref","deref_mut","deserialize_as","drop","from","init","into","ser","serialize_as","try_from","try_into","type_id","vzip","deserialize","serialize","BaseField","ScalarField","fields"],"q":["o1_utils","","","","","","","","o1_utils::chunked_polynomial","","","","","","","","","","","","","","","","","o1_utils::dense_polynomial","","","","","o1_utils::evaluations","","","","","o1_utils::field_helpers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","o1_utils::hasher","","","o1_utils::math","o1_utils::serialization","","","","","","","","","","","","","","","","o1_utils::serialization::ser","","o1_utils::types","",""],"d":["","This adds a few utility functions for the DensePolynomial …","This adds a few utility functions for the Evaluations …","","This module provides the CryptoDigest trait, which …","This modules implements some math helper functions.","This adds a few utility functions for serializing and …","This is used to define common types and associated …","This struct contains multiple chunk polynomials with …","","","","","","This function evaluates polynomial in chunks.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Multiplies the chunks of a polynomial with powers of …","The chunk polynomials.","Each chunk polynomial has degree <code>size-1</code>.","","","","","An extension for the DensePolynomial type.","<code>eval_polynomial(coeffs, x)</code> evaluates a polynomial given …","This function “scales” (multiplies all the …","Shifts all the coefficients to the right.","Convert a polynomial into chunks.","An extension for the Evaluations type.","Raise each evaluation to some power <code>pow</code>","This function “scales” (multiplies) a polynomial with …","Utility function for shifting poly along domain coordinate","Square each evaluation","","","Field element helpers","","","","","","","","","","","","","Returns the argument unchanged.","Deserialize from bits","Deserialize from bytes","Deserialize from hex","","Calls <code>U::from(self)</code>.","Field size in bytes","Serialize to bits","Serialize to bytes","Serialize to hex","","","","","","","This trait can be implemented on any type that implements …","The domain separation string to use in the hash. This is …","Returns the digest of <code>self</code>. Note: this is implemented as …","Returns ceil(log2(d)) but panics if d = 0.","You can use SerdeAs with serde_with in order to serialize …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","You can use this module for serialization and …","","","","","","You can use this to deserialize an arkworks type with …","You can use this to serialize an arkworks type with serde …","Alias to refer to the base field of a curve.","Alias to refer to the scalar field of a curve.","Fields prologue"],"i":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,0,3,3,3,3,4,4,0,0,0,4,4,4,4,4,4,4,4,4,4,4,5,5,5,4,4,5,5,5,5,4,4,4,4,4,4,0,6,6,0,0,7,7,7,7,7,7,7,7,7,0,7,7,7,7,7,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0]],["vec",3]],[[]],[[],["usize",0]],[[]],[[["",0]],["densepolynomial",3]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[]],[[["",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["chunkedpolynomial",3]],null,[[["",0],["usize",0]]],[[["",0]]],[[["",0],["usize",0]]],[[["",0]]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["fieldhelperserror",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["",0],["fieldhelperserror",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["result",6]],[[],["result",6]],[[["str",0]],["result",6]],[[],["usize",0]],[[]],[[],["usize",0]],[[],["vec",3,[["bool",0]]]],[[],["vec",3,[["u8",0]]]],[[],["string",3]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,[[["",0]]],[[["usize",0]],["usize",0]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[]],[[],["usize",0]],[[]],null,[[["",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[],["result",4]],[[],["result",4]],null,null,null],"p":[[3,"ChunkedPolynomial"],[8,"ExtendedDensePolynomial"],[8,"ExtendedEvaluations"],[4,"FieldHelpersError"],[8,"FieldHelpers"],[8,"CryptoDigest"],[3,"SerdeAs"]]},\
"ocaml_derive":{"doc":"ocaml-derive adds a number of derives to make ocaml-gen …","t":[24,24,24,23],"n":["CustomType","Enum","Struct","func"],"q":["ocaml_derive","","",""],"d":["Derives implementations for OCamlDesc and OCamlBinding on …","The Enum derive macro. It generates implementations of …","The Struct derive macro. It generates implementations of …","A macro to create OCaml bindings for a function that uses …"],"i":[0,0,0,0],"f":[null,null,null,null],"p":[]},\
"ocaml_gen":{"doc":"Generating bindings","t":[24,24,3,8,8,24,11,11,14,0,14,14,14,14,14,11,11,11,11,23,11,11,11,11,11,10,10,11,14,11,11,11,11,10],"n":["CustomType","Enum","Env","OCamlBinding","OCamlDesc","Struct","borrow","borrow_mut","const_random","conv","decl_fake_generic","decl_func","decl_module","decl_type","decl_type_alias","default","drop","fmt","from","func","get_type","into","nested","new_module","new_type","ocaml_binding","ocaml_desc","parent","paste","root","try_from","try_into","type_id","unique_id"],"q":["ocaml_gen","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Derives implementations for OCamlDesc and OCamlBinding on …","The Enum derive macro. It generates implementations of …","The environment at some point in time during the …","OCamlBinding is the trait implemented by types to generate …","OCamlDesc is the trait implemented by types to facilitate …","The Struct derive macro. It generates implementations of …","","","Random constants","Implementations of crate::OCamlDesc for types that have …","Creates a fake generic. This is a necessary hack, at the …","Declares the binding for a given function","Creates a module","Declares the binding for a given type","Declares a new OCaml type that is made of other types","","This makes sure that we close our OCaml modules (with the …","","Returns the argument unchanged.","A macro to create OCaml bindings for a function that uses …","retrieves a type that was declared previously","Calls <code>U::from(self)</code>.","how deeply nested are we currently? (default is 0)","create a module and enters it","Declares a new type. If the type was already declared, …","will generate the OCaml bindings for a type (called root …","describes the type in OCaml, given the current environment …","go back up one module","","you can call this to go back to the root and finalize the …","","","","Returns a unique ID for the type. This ID will not change …"],"i":[0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,2,3,1,0,1,1,1,1,3],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,null,null,null,[[],["env",3]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[["",0],["u128",0],["str",0]],["string",3]],[[]],[[["",0]],["usize",0]],[[["",0],["str",0]],["string",3]],[[["",0],["u128",0],["str",0]]],[[["env",3],["option",4,[["str",0]]],["bool",0]],["string",3]],[[["env",3]],["string",3]],[[["",0]],["string",3]],null,[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["u128",0]]],"p":[[3,"Env"],[8,"OCamlBinding"],[8,"OCamlDesc"]]},\
"oracle":{"doc":"","t":[8,10,10,10,10,0,10,10,0,0,0,0,18,18,18,18,18,18,3,3,18,18,18,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,5,5,5,5,5,5,5,13,3,3,8,4,13,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,10,11,12,5,11,12,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FqSponge","absorb_fr","absorb_g","challenge","challenge_fq","constants","digest","new","pasta","permutation","poseidon","sponge","PERM_FULL_MDS","PERM_HALF_ROUNDS_FULL","PERM_INITIAL_ARK","PERM_ROUNDS_FULL","PERM_ROUNDS_PARTIAL","PERM_SBOX","PlonkSpongeConstantsKimchi","PlonkSpongeConstantsLegacy","SPONGE_CAPACITY","SPONGE_RATE","SPONGE_WIDTH","SpongeConstants","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","fp_kimchi","fp_legacy","fq_kimchi","fq_legacy","params","params","params","params","full_round","half_rounds","poseidon_block_cipher","Absorbed","ArithmeticSponge","ArithmeticSpongeParams","Sponge","SpongeState","Squeezed","absorb","absorb","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","constants","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","fmt","fmt","from","from","from","full_round","init","init","init","into","into","into","mds","new","new","reset","reset","round_constants","sbox","serialize","sponge_state","squeeze","squeeze","state","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","0","0","CHALLENGE_LENGTH_IN_LIMBS","DefaultFqSponge","DefaultFrSponge","ScalarChallenge","absorb_fr","absorb_g","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","challenge","challenge_fq","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","digest","drop","drop","drop","endo_coefficient","fmt","from","from","from","init","init","init","into","into","into","last_squeezed","last_squeezed","new","sponge","sponge","squeeze","squeeze","squeeze_field","squeeze_limbs","to_field","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["oracle","","","","","","","","","","","","oracle::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oracle::pasta","","","","oracle::pasta::fp_kimchi","oracle::pasta::fp_legacy","oracle::pasta::fq_kimchi","oracle::pasta::fq_legacy","oracle::permutation","","","oracle::poseidon","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oracle::poseidon::SpongeState","","oracle::sponge","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","The permutation module contains the function implementing …","This module implements Poseidon Hash Function primitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Cryptographic sponge interface - for hashing an arbitrary …","","","Absorb an array of field elements <code>x</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new cryptographic sponge using arithmetic sponge …","","Reset the sponge back to its initial state (as if it were …","","","","","","Squeeze an output from the sponge","","","","","","","","","","","","","","","","","","","","","","","","A challenge which is used as a scalar on a group element …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,0,1,1,0,0,0,0,2,2,2,2,2,2,0,0,2,2,2,0,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,5,6,7,5,8,7,5,8,7,5,8,7,5,8,7,7,8,5,8,7,5,8,7,8,5,8,7,5,8,5,8,7,7,5,8,7,5,8,7,8,6,7,6,7,8,0,8,7,6,7,7,5,8,7,5,8,7,5,8,7,5,8,7,5,8,7,9,10,11,0,0,0,0,12,12,13,11,12,13,11,12,12,12,11,12,11,12,13,11,12,13,11,12,12,13,11,12,0,11,13,11,12,13,11,12,13,11,12,13,12,12,13,12,13,12,12,12,11,11,12,13,11,12,13,11,12,13,11,12,13,11,12],"f":[null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],null,[[]],[[["arithmeticspongeparams",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["plonkspongeconstantslegacy",3]],[[["",0]],["plonkspongeconstantskimchi",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,[[],["arithmeticspongeparams",3,[["fp",6]]]],[[],["arithmeticspongeparams",3,[["fp",6]]]],[[],["arithmeticspongeparams",3,[["fq",6]]]],[[],["arithmeticspongeparams",3,[["fq",6]]]],[[["arithmeticspongeparams",3],["vec",3],["usize",0]]],[[["arithmeticspongeparams",3],["vec",3]]],[[["arithmeticspongeparams",3],["vec",3]]],null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["spongestate",4]],[[["",0]],["arithmeticspongeparams",3]],[[["",0]],["arithmeticsponge",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["arithmeticspongeparams",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0],["usize",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],null,[[["arithmeticspongeparams",3]]],[[["arithmeticspongeparams",3]],["arithmeticsponge",3]],[[["",0]]],[[["",0]]],null,[[["field",8]],["field",8]],[[["",0]],["result",4]],null,[[["",0]]],[[["",0]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]],["scalarchallenge",3]],[[["",0]],["defaultfqsponge",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[],["primefield",8]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],null,null,[[["arithmeticspongeparams",3]],["defaultfqsponge",3]],null,null,[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0]]],[[["",0],["usize",0]],["vec",3,[["u64",0]]]],[[["",0],["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]]],"p":[[8,"FqSponge"],[8,"SpongeConstants"],[3,"PlonkSpongeConstantsLegacy"],[3,"PlonkSpongeConstantsKimchi"],[4,"SpongeState"],[8,"Sponge"],[3,"ArithmeticSponge"],[3,"ArithmeticSpongeParams"],[13,"Absorbed"],[13,"Squeezed"],[3,"ScalarChallenge"],[3,"DefaultFqSponge"],[3,"DefaultFrSponge"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};